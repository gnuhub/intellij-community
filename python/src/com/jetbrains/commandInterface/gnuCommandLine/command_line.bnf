/*TODO:Add generation to ant*/

// This file is used to auto-generate lexer and parser for gnu command line language
// Please make sure .flex, and .java generated files are all in "gen" folder under this module.
// Generate flex first, then generate lexer by flex, and then generate PSI and parser

{
   // All 3 elements should implement this class
   mixin("command")="com.jetbrains.commandInterface.gnuCommandLine.CommandLineElement"
   mixin("argument")="com.jetbrains.commandInterface.gnuCommandLine.CommandLineElement"
   mixin("option")="com.jetbrains.commandInterface.gnuCommandLine.CommandLineElement"

   parserClass = 'com.jetbrains.commandInterface.gnuCommandLine.CommandLineParser'
   parserUtilClass="com.jetbrains.commandInterface.gnuCommandLine.CommandLineParserUtil"
   psiImplUtilClass="com.jetbrains.commandInterface.gnuCommandLine.psi.impl.CommandLinePsiImplUtils"
   psiPackage = 'com.jetbrains.commandInterface.gnuCommandLine.psi'
   psiImplPackage = 'com.jetbrains.commandInterface.gnuCommandLine.psi.impl'

   elementTypeHolderClass = 'com.jetbrains.commandInterface.gnuCommandLine.CommandLineElementTypes'
   psiClassPrefix = "CommandLine"
   psiVisitorName = "CommandLineVisitor"
   elementTypeClass = 'com.jetbrains.commandInterface.gnuCommandLine.CommandLineElementType'


  tokens=[
    space='regexp:\s+' // WARNING: Comment out or remove this (space) before generating Flex file! It is here only for live preview.
    EQ = '='
    LITERAL_STARTS_FROM_LETTER='regexp:\p{Alpha}(\w|:|\\|/|\.)*'
    LITERAL_STARTS_FROM_DIGIT='regexp:\p{Digit}(\w|:|\\\|/|\.)*'
    SHORT_OPTION_NAME_TOKEN='regexp:-\p{Alpha}'
    LONG_OPTION_NAME_TOKEN='regexp:--\p{Alpha}(-|\w)*'
  ]

}

root ::= command (argument | option ) *  <<eof>>
command ::= LITERAL_STARTS_FROM_LETTER
option ::= (short_option_name <<bound_argument>> ? | long_option_name <<bound_argument>> ?)  {
methods=[ getOptionName isLong ]
}
private short_option_name ::= SHORT_OPTION_NAME_TOKEN
private long_option_name ::= LONG_OPTION_NAME_TOKEN
argument ::= LITERAL_STARTS_FROM_LETTER | LITERAL_STARTS_FROM_DIGIT

